function test_socket_get
    [ctx, socket] = setup;
    cleanupObj = onCleanup(@() cellfun(@(f) f(), ...
        {@() clear('socket'), @() teardown(ctx)}, ...
        'UniformOutput', false));

    % Table with the default values for options
    defaultOptions = { ...
        {'type'                , 'ZMQ_REP' } , ...
        {'rcvmore'             , 0         } , ...
        {'sndhwm'              , 1000      } , ...
        {'rcvhwm'              , 1000      } , ...
        {'affinity'            , 0         } , ...
    ... %  {'identity'            , ''        } , ... % issues on octave
        {'rate'                , 100       } , ...
        {'recovery_ivl'        , 10000     } , ...
        {'rcvbuf'              , 0         } , ...
        {'linger'              , -1        } , ...
        {'reconnect_ivl'       , 100       } , ...
        {'reconnect_ivl_max'   , 0         } , ...
        {'backlog'             , 100       } , ...
        {'maxmsgsize'          , -1        } , ...
        {'multicast_hops'      , 1         } , ...
        {'rcvtimeo'            , -1        } , ...
        {'sndtimeo'            , -1        } , ...
        {'ipv6'                , 0         } , ...
        {'ipv4only'            , 1         } , ...
        {'immediate'           , 0         },  ...
        {'tcp_keepalive'       , -1        } , ...
        {'tcp_keepalive_idle'  , -1        } , ...
        {'tcp_keepalive_cnt'   , -1        } , ...
        {'tcp_keepalive_intvl' , -1        } , ...
        {'mechanism'           , 'ZMQ_NULL'} , ...
        {'plain_username'      , ''        } , ...
        {'plain_password'      , ''        } , ...
    };

    % This loop will test all the socket options against the default values listed
    % above.
    %
    % Once the socket is fresh and unused, all the options should remain with the
    % default values.
    for n = 1:(length(defaultOptions)-1)
        option = defaultOptions{n}{1};
        value = defaultOptions{n}{2};

        response = assert_does_not_throw(@socket.get, option);

        if ~ischar(value)
            condition = response == value;
            % display
            response = num2str(response);
            value = num2str(value);
        else
            condition = strcmp(value, response);
            % display
            response = ['"' response '"'];
            value = ['"' value '"'];
        end

        assert(condition, '%s should be %s, %s given.', option, value, response);
    end
end

function [ctx, socket] = setup
    % let's just create and destroy a dummy socket
    ctx = zmq.core.ctx_new();
    socket = zmq.Socket(ctx, 'rep');
end

function teardown(ctx)
    % close session
    zmq.core.ctx_shutdown(ctx);
    zmq.core.ctx_term(ctx);
end